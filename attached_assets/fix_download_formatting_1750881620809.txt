🎯 Fix Download File Formatting for Paste Content

🧩 Problem:
When a user clicks the "Download" button to save a paste as a `.txt` file, the resulting file contains leading whitespace or vertical padding that misaligns the code. This can cause syntax/formatting issues for languages sensitive to indentation.

🎯 Goal:
Ensure the downloaded file content reflects exactly what was entered in the content area — without leading/trailing whitespace or vertical padding.

✅ Implementation Instructions:

1. **Locate the Download Logic:**
   In the JavaScript handling the paste view (e.g., `view-paste.js` or wherever the download logic resides), find the function bound to the `Download` button.

2. **Fix the File Blob Generation:**
   Update the code that constructs the file content:
   ```js
   const content = document.querySelector('.paste-content').innerText.trim();  // or textContent
   const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
   ```

   - Use `.textContent` instead of `.innerHTML` or `.innerText` if you want raw newline handling.
   - Ensure `trim()` only removes outer empty lines or spaces. Avoid modifying valid inner indentation.
   - If leading spaces are preserved incorrectly by HTML rendering, try:
     ```js
     const content = Array.from(document.querySelectorAll('.paste-content code')).map(el => el.textContent).join('\n');
     ```

3. **Check Preformatting Settings:**
   If your paste display uses `<pre>` or a syntax highlighter that adds spacing:
   - Consider sourcing raw content from the server if stored, or using `textarea.value` during edit previews.

4. **Test Cases to Validate:**
   - Content with tab-indented code (Python)
   - Multiline scripts with mixed indent
   - Copy/paste from IDEs like VSCode

📦 Bonus:
- Add a `.txt` extension explicitly if not already handled:
  ```js
  a.download = (pasteTitle || 'paste') + '.txt';
  ```

🎨 Optional UX:
- Show a small confirmation toast: “📄 File downloaded”
- Offer format choice (e.g., .txt or .md) if needed in future